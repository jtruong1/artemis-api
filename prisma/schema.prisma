generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  monitors  Monitor[]
}

model Monitor {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  url       String
  label     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  checks    Check[]
}

model Check {
  id        Int        @id @default(autoincrement())
  monitor   Monitor    @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  monitorId Int        @map("monitor_id")
  type      Type
  label     String
  status    Status     @default(pending)
  interval  Int
  enabled   Boolean    @default(true)
  metadata  Json?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  checkedAt DateTime?  @map("checked_at")
  incidents Incident[]
}

model Incident {
  id         Int       @id @default(autoincrement())
  check      Check     @relation(fields: [checkId], references: [id], onDelete: Cascade)
  checkId    Int       @map("check_id")
  reason     String
  startedAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  resolvedAt DateTime? @map("resolved_at")
}

enum Type {
  uptime
  certificate
}

enum Status {
  pending
  up
  down
}
